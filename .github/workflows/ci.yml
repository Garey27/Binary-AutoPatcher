# Copyright (c) 2021 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT

# A "pure" GitHub workflow using CMake, Ninja and vcpkg to build a C/C++ codebase.
# It leverages both CMakePresets.json and vcpkg.json to have consistent build locallly
# and on continuous integration servers (aka build agents).
# It is called "pure workflow" because it is an example which minimizes the usage of
# custom GitHub actions, but leverages directly the tools that could be easily run on
# your development machines (i.e. CMake, vcpkg, Ninja) to ensure a perfectly identical
# and reproducible build locally (on your development machine) and remotely (on build agents).
name: hosted-pure-workflow
on: [push, workflow_dispatch]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            name: windows
            binary_path: 'builds/ninja-multi/Release/bin_autopatcher.exe'
          - os: ubuntu-latest
            name: linux
            binary_path: 'builds/ninja-multi/Release/bin_autopatcher'
          - os: macos-latest
            name: osx
            binary_path: 'builds/ninja-multi/Release/bin_autopatcher'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files
        run: |
          cmake --preset ninja-multi

      # Build the whole project with Ninja (which is spawn by CMake). Release configuration.
      - name: Build (Release)
        run: |
          cmake --build --preset ninja-multi-release
        
      - name: Deploy artifacts
        uses: actions/upload-artifact@v3
        with:
            name: binray-auto-patcher-${{ matrix.name }}
            path: ${{ matrix.binary_path }}

     # Create release

      # Official action upload-release-asset doesn't support uploading files
      # based on a glob, so use https://github.com/softprops/action-gh-release
      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          draft: true
          files: ${{ matrix.binary_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}